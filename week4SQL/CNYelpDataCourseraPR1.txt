Data Scientist Role Play: Profiling and Analyzing the Yelp Dataset Coursera Worksheet

This is a 2-part assignment. In the first part, you are asked a series of questions that will help you profile and understand the data just like a data scientist would. For this first part of the assignment, you will be assessed both on the correctness of your findings, as well as the code you used to arrive at your answer. You will be graded on how easy your code is to read, so remember to use proper formatting and comments where necessary.

In the second part of the assignment, you are asked to come up with your own inferences and analysis of the data for a particular research question you want to answer. You will be required to prepare the dataset for the analysis you choose to do. As with the first part, you will be graded, in part, on how easy your code is to read, so use proper formatting and comments to illustrate and communicate your intent as required.

For both parts of this assignment, use this "worksheet." It provides all the questions you are being asked, and your job will be to transfer your answers and SQL coding where indicated into this worksheet so that your peers can review your work. You should be able to use any Text Editor (Windows Notepad, Apple TextEdit, Notepad ++, Sublime Text, etc.) to copy and paste your answers. If you are going to use Word or some other page layout application, just be careful to make sure your answers and code are lined appropriately.
In this case, you may want to save as a PDF to ensure your formatting remains intact for you reviewer.



Part 1: Yelp Dataset Profiling and Understanding

1. Profile the data by finding the total number of records for each of the tables below:
	
i. Attribute table = 10000 
	-- count all rows from table
	SELECT count(*) as amountOfRecords FROM attribute 

ii. Business table = 10000
	-- count all rows from table
	SELECT count(*) as amountOfRecords FROM business 

iii. Category table = 10000

	-- count all rows from table
	SELECT count(*) as amountOfRecords FROM category 

iv. Checkin table = 10000
	-- count all rows from table
	SELECT count(*) as amountOfRecords FROM checkin

v. elite_years table = 10000
	 -- count all rows from table
	SELECT count(*) as amountOfRecords FROM elite_years

vi. friend table = 10000
	-- count all rows from table
	SELECT count(*) as amountOfRecords FROM friend 

vii. hours table = 10000
	-- count all rows from table
	SELECT count(*) as amountOfRecords FROM hours 

viii. photo table = 
	-- count all rows from table
	SELECT count(*) as amountOfRecords FROM photo 

ix. review table = 10000
	-- count all rows from table
	SELECT count(*) as amountOfRecords FROM review

x. tip table = 10000
	-- count all rows from table
	SELECT count(*) as amountOfRecords FROM tip

xi. user table = 10000
	-- count all rows from table
	SELECT count(*) as amountOfRecords FROM user 


2. Find the total distinct records by either the foreign key or primary key for each table. If two foreign keys are listed in the table, please specify which foreign key.

****. NOTE: The column name used next to DISTINCT on each query is the primary or foreign key used.

i. Business = 10000
	-- count the unique ids from table
	SELECT count(DISTINCT id) FROM business

 
ii. Hours = 1562
	-- count the unique total number of businesses that have any number of hours recorded in this table.
	SELECT count( DISTINCT business_id) FROM hours


iii. Category = 2643
	-- count the unique total number of businesses that have any number of categories recorded in this table.
	SELECT count( DISTINCT business_id) FROM category


iv. Attribute = 1115
	-- count the unique total number of businesses that have any number of attributes recorded in this table.
	SELECT count( DISTINCT business_id) FROM attribute	


v. Review = 9581
	-- count the unique total number of users that made any number of reviews recorded in this table.
	SELECT count( DISTINCT user_id) FROM review	


vi. Checkin = 493
	-- count the unique total number of businesses that had any number of checkins recorded in this table.
	SELECT count( DISTINCT business_id) FROM checkin	

 
vii. Photo = 6493
	-- count the unique total number of businesses that had any number of photos recorded in this table.
	SELECT count( DISTINCT business_id) FROM photo	

 
viii. Tip = 537
	-- count the unique total number of users that had any number of tips recorded in this table.
	SELECT count( DISTINCT user_id) FROM tip	

 
ix. User = 10000
	-- count the unique total number of user ids that have a record in this table.
	SELECT count( DISTINCT id) FROM user	

 
x. Friend = 11
	-- count the unique total number of users that have a friend recorded in this table.
	SELECT count( DISTINCT user_id) FROM friend	

 
xi. Elite_years = 2780
-- count the unique total number of users that have a year recorded in this table.
	SELECT count( DISTINCT user_id) FROM elite_years	

 


Note: Primary Keys are denoted in the ER-Diagram with a yellow key icon.	



3. Are there any columns with null values in the Users table? Indicate "yes," or "no."

	Answer:
	No.
	
	SQL code used to arrive at answer:
	
	SELECT sum(id IS NULL OR name IS NULL OR review_count IS NULL OR yelping_since IS NULL OR useful IS NULL OR funny IS NULL OR cool IS NULL OR fans IS NULL OR average_stars IS NULL OR compliment_hot IS NULL OR compliment_more IS NULL OR compliment_profile IS NULL OR compliment_cute IS NULL OR compliment_list IS NULL OR compliment_note IS NULL OR compliment_plain IS NULL OR compliment_cool IS NULL OR compliment_funny IS NULL OR compliment_writer IS NULL OR compliment_photos IS NULL) as AnyNulls
from user


	
4. For each table and column listed below, display the smallest (minimum), largest (maximum), and average (mean) value for the following fields:

	i. Table: Review, Column: Stars
	
		min:1		max:5		avg:3.7082
		
	
	ii. Table: Business, Column: Stars
	
		min:1		max:5		avg:3.6549
		
	
	iii. Table: Tip, Column: Likes
	
		min:0		max:2		avg:0.0144
		
	
	iv. Table: Checkin, Column: Count
	
		min:1		max:53		avg:1.9414
		
	
	v. Table: User, Column: Review_count
	
		min:0		max:2000		avg:24.2995
		


5. List the cities with the most reviews in descending order:

	SQL code used to arrive at answer:
	
SELECT city, sum(review_count) as review_count_total 
FROM business
GROUP BY city
ORDER BY review_count_total DESC
Limit 10 -- Top 10 cities
	
	
	Copy and Paste the Result Below:
+------------+--------------------+
| city       | review_count_total |
+------------+--------------------+
| Las Vegas  |              82854 |
| Phoenix    |              34503 |
| Toronto    |              24113 |
| Scottsdale |              20614 |
| Charlotte  |              12523 |
| Henderson  |              10871 |
| Tempe      |              10504 |
| Pittsburgh |               9798 |
| Montréal   |               9448 |
| Chandler   |               8112 |
+------------+--------------------+

	
6. Find the distribution of star ratings to the business in the following cities:

i. Avon

SQL code used to arrive at answer:
-- Returns two columns with the average stars per city and the sum of reviews per city.
SELECT AVG(stars), sum(review_count)
FROM business
WHERE city = 'Avon'
GROUP BY city

Copy and Paste the Resulting Table Below (2 columns ñ star rating and count):
+------------+-------------------+
| AVG(stars) | sum(review_count) |
+------------+-------------------+
|       3.45 |               159 |
+------------+-------------------+

ii. Beachwood

SQL code used to arrive at answer:
-- Returns two columns with the average stars per city and the sum of reviews per city.
SELECT AVG(stars), sum(review_count)
FROM business
WHERE city = 'Beachwood'
GROUP BY city

Copy and Paste the Resulting Table Below (2 columns ñ star rating and count):
+---------------+-------------------+
|    AVG(stars) | sum(review_count) |
+---------------+-------------------+
| 3.96428571429 |               137 |
+---------------+-------------------+		


7. Find the top 3 users based on their total number of reviews:
		
	SQL code used to arrive at answer:
	SELECT id,name,review_count
	FROM user
	ORDER BY review_count DESC
	Limit 3
		
	Copy and Paste the Result Below:
+------------------------+--------+--------------+
| id                     | name   | review_count |
+------------------------+--------+--------------+
| -G7Zkl1wIWBBmD0KRy_sCw | Gerald |         2000 |
| -3s52C4zL_DHRK0ULG6qtg | Sara   |         1629 |
| -8lbUNlXVSoXqaRRiHiSNg | Yuri   |         1339 |
+------------------------+--------+--------------+


8. Does posing more reviews correlate with more fans?

	Please explain your findings and interpretation of the results:
	By looking at the top 10 users with more reviews and comparing their number of fans, we can see that the top user has less fans that other users that have half the number of review but double the number of fans of the top user.  Also, if you calculate the correlation between number of reviews and fans using the top 25 users with more reviews, the correlation is closer to 0.3, which means that when reviews increases, number of fans tend to increase but not by much.  If the correlation was closer to 1.0 then we could have said that more reviews will correlate with more fans.

	
9. Are there more reviews with the word "love" or with the word "hate" in them?

	Answer:
	There are more reviews with the word "love" in them than the word "hate".
	
	SQL code used to arrive at answer:
	SELECT sum(text like '%love%') as love_count, sum(text like '%hate%') as hate_count
	FROM review
  
	
	
10. Find the top 10 users with the most fans:

	SQL code used to arrive at answer:
	
	SELECT id,name,fans
	FROM user
	ORDER BY fans DESC
	Limit 10
	
	Copy and Paste the Result Below:
+------------------------+-----------+------+
| id                     | name      | fans |
+------------------------+-----------+------+
| -9I98YbNQnLdAmcYfb324Q | Amy       |  503 |
| -8EnCioUmDygAbsYZmTeRQ | Mimi      |  497 |
| --2vR0DIsmQ6WfcSzKWigw | Harald    |  311 |
| -G7Zkl1wIWBBmD0KRy_sCw | Gerald    |  253 |
| -0IiMAZI2SsQ7VmyzJjokQ | Christine |  173 |
| -g3XIcCb2b-BD0QBCcq2Sw | Lisa      |  159 |
| -9bbDysuiWeo2VShFJJtcw | Cat       |  133 |
| -FZBTkAZEXoP7CYvRV2ZwQ | William   |  126 |
| -9da1xk7zgnnfO1uTVYGkA | Fran      |  124 |
| -lh59ko3dxChBSZ9U7LfUw | Lissa     |  120 |
+------------------------+-----------+------+
	
	
11. Is there a strong relationship (or correlation) between having a high number of fans and being listed as "useful" or "funny?" Out of the top 10 users with the highest number of fans, what percent are also listed as ìusefulî or ìfunnyî?

Key:
0% - 25% - Low relationship
26% - 75% - Medium relationship
76% - 100% - Strong relationship
	
	SQL code used to arrive at answer:
	-- First part: Used to calculate the correlation by displaying the top 25 users with more fans and then calculating correlation in excel from that resulting table.
	SELECT id,name,fans,useful, funny
	FROM user
	ORDER BY fans DESC
	Limit 25
	
	-- Second part: (this one produces the result below)
	SELECT id,name,fans,round(useful*100.0/(SELECT sum(useful)
	FROM user
	ORDER BY fans DESC
	Limit 10),2) as useful_pct, round(funny*100.0 / (SELECT sum(funny) 
	FROM user
	ORDER BY fans DESC
	Limit 10),2) as funny_pct
	FROM user
	ORDER BY fans DESC
	Limit 10
	



	Copy and Paste the Result Below:
	
	
	Please explain your findings and interpretation of the results:
	There is not a strong correlation between having a high number of fans and being listed as "useful" or "funny."  Both correlations are positive but 0.3 or lower.  See more details on question 8.

	The second part of the question:
	For the second part, I calculated the percent of useful and funny for the top 10 users.  We can see that Harald is 32 % useful and 49 % funny, having the highest score in for these top 10 users.
	

Part 2: Inferences and Analysis

1. Pick one city and category of your choice and group the businesses in that city or category by their overall star rating. Compare the businesses with 2-3 stars to the businesses with 4-5 stars and answer the following questions. Include your code.
	
i. Do the two groups you chose to analyze have a different distribution of hours?

Yes, the low stars group has hours of 5-20 while the high stars group have hours of 11-22. Seems like the opening hour will have an impact on the stars rating due to factors such as the audience type that visits the establishment at those hours.

CODE::


select b.id,b.name,b.city,c.category, 
CASE WHEN b.stars between 2 and 3 THEN 'low' 
WHEN b.stars between 4 and 5 THEN 'high'
ELSE NULL
END as stars_group, h.hours
FROM business b
LEFT JOIN category c
ON c.business_id = b.id
LEFT JOIN hours h
ON b.id = h.business_id
WHERE c.category = 'Food' and b.city = 'Phoenix'
ORDER BY stars_group




ii. Do the two groups you chose to analyze have a different number of reviews?
Yes, the high stars group has very high and very low review_count.  The low starts group has a medium number of reviews. The business with high review_count could be considered as having a more meaningful stars rating.

CODE::

select b.id,b.name,b.city,c.category, 
CASE WHEN b.stars between 2 and 3 THEN 'low' 
WHEN b.stars between 4 and 5 THEN 'high'
ELSE NULL
END as stars_group, b.review_count
FROM business b
LEFT JOIN category c
ON c.business_id = b.id

WHERE c.category = 'Food' and b.city = 'Phoenix'
ORDER BY stars_group
 
         
iii. Are you able to infer anything from the location data provided between these two groups? Explain.

I could infer that some cities have users that review more businesses than users in other cities that will not review that many businesses.  Also, I notice that the cities with more reviews have businesses located in the high stars group while the low starts group has less review counts per city.

SQL code used for analysis:


select b.city,c.category, 
CASE WHEN b.stars between 2 and 3.999 THEN 'low' 
WHEN b.stars between 4 and 5 THEN 'high'
WHEN b.stars between 0 and 1.9999 THEN 'bad'
ELSE NULL
END as stars_group, sum(b.review_count)
FROM business b
LEFT JOIN category c
ON c.business_id = b.id
WHERE c.category = 'Food' --and b.city = 'Phoenix'
GROUP BY city
ORDER BY stars_group, city


		
		
2. Group business based on the ones that are open and the ones that are closed. What differences can you find between the ones that are still open and the ones that are closed? List at least two differences and the SQL code you used to arrive at your answer.
		
i. Difference 1:
   Businesses that are open have 3 times the number of reviews than those businesses that are closed.
         
ii. Difference 2:
    In average, the businesses that are open have higher, but not significantly higher, stars than those businesses that are closed.
         
         
SQL code used for analysis:

SELECT is_open, max(review_count),avg(stars)
FROM business
GROUP BY is_open
	
	
3. For this last part of your analysis, you are going to choose the type of analysis you want to conduct on the Yelp dataset and are going to prepare the data for analysis.

Ideas for analysis include: Parsing out keywords and business attributes for sentiment analysis, clustering businesses to find commonalities or anomalies between them, predicting the overall star rating for a business, predicting the number of fans a user will have, and so on. These are just a few examples to get you started, so feel free to be creative and come up with your own problem you want to solve. Provide answers, in-line, to all of the following:
	
i. Indicate the type of analysis you chose to do:
 
    
	I would like to have the following user categories based on their average_stars given on their reviews.
		High (4-5)
		Mid (2.5,3.999)
		Low (0,2.499)

	Then, for each category, I would like to understand which user group has the most fans or how are they considered by the community in terms of usefulness, funniness, and coolness.


         
ii. Write 1-2 brief paragraphs on the type of data you will need for your analysis and why you chose that data:

	I will need the user table that contains the columns with the following counts: useful, funny, cool, fans, average stars per user, and the average_stars given by each user.  I used this table and columns since they will help me understand qualities of these users as seen by the community.

	For example, with this data we can see that the users that give mid level reviews are the ones that give the most amount of reviews, in average, and have the most fans.  On the other hand, those users that give high stars ratings, are considered by the community to be the most useful, funny, and cool.
              
iii. Output of your finished dataset:

+----------------+---------------+------------+-----------+----------+----------+
| average_stars_ | avg_rev_count | sum_useful | sum_funny | sum_cool | sum_fans |
+----------------+---------------+------------+-----------+----------+----------+
| Mid            | 40.6830379747 |     177624 |     85206 |   104367 |     9523 |
| High           | 16.3349628055 |     200112 |    161905 |   168360 |     5278 |
| Low            | 4.04535315985 |       2827 |       816 |      660 |       95 |
+----------------+---------------+------------+-----------+----------+----------+

         
iv. Provide the SQL code you used to create your final dataset:

SELECT CASE WHEN average_stars BETWEEN 4 and 5 THEN 'High'
WHEN average_stars BETWEEN 2.5 and 3.9999 THEN 'Mid'
WHEN average_stars BETWEEN 0 and 2.499999 THEN 'Low' END
 as average_stars_,
avg(review_count) as avg_rev_count,sum(useful) as sum_useful,
sum(funny) as sum_funny,
sum(cool) as sum_cool,
sum(fans) as sum_fans
from user
group by average_stars_
order by avg_rev_count DESC